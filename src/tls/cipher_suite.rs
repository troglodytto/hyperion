#[derive(Debug)]
#[allow(non_camel_case_types)]
pub enum CipherSuite {
    TLS_AES_128_GCM_SHA256,
    TLS_AES_256_GCM_SHA384,
    TLS_CHACHA20_POLY1305_SHA256,
    TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,
    TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256,
    TLS_DHE_RSA_WITH_AES_128_CCM,
    TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,
    TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,
    TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,
    TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,
    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,
    TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,
    TLS_DHE_RSA_WITH_AES_256_CBC_SHA,
    TLS_DHE_RSA_WITH_AES_128_CBC_SHA,
    TLS_RSA_WITH_AES_256_CBC_SHA256,
    TLS_RSA_WITH_AES_128_CBC_SHA256,
    TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,
    TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,
    TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
    TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
    TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
    TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
    TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
    TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,
    TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
    TLS_RSA_WITH_AES_128_GCM_SHA256,
    TLS_RSA_WITH_AES_256_GCM_SHA384,
    TLS_RSA_WITH_AES_128_CBC_SHA,
    TLS_RSA_WITH_AES_256_CBC_SHA,
    TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,
    TLS_RSA_WITH_3DES_EDE_CBC_SHA,
    TLS_EMPTY_RENEGOTIATION_INFO_SCSV,
    Reserved,
    Unknown((u8, u8)),
}

impl CipherSuite {
    pub fn from(cipher_suite_byte_pair: &[u8]) -> CipherSuite {
        match cipher_suite_byte_pair {
            [0x13, 0x01] => CipherSuite::TLS_AES_128_GCM_SHA256,
            [0x13, 0x02] => CipherSuite::TLS_AES_256_GCM_SHA384,
            [0x13, 0x03] => CipherSuite::TLS_CHACHA20_POLY1305_SHA256,
            [0x00, 0x9f] => CipherSuite::TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,
            [0xcc, 0xaa] => CipherSuite::TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256,
            [0x00, 0x9e] => CipherSuite::TLS_DHE_RSA_WITH_AES_128_CCM,
            [0xc0, 0x24] => CipherSuite::TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,
            [0xc0, 0x28] => CipherSuite::TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,
            [0x00, 0x6b] => CipherSuite::TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,
            [0xc0, 0x23] => CipherSuite::TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,
            [0xc0, 0x27] => CipherSuite::TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,
            [0x00, 0x67] => CipherSuite::TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,
            [0x00, 0x39] => CipherSuite::TLS_DHE_RSA_WITH_AES_256_CBC_SHA,
            [0x00, 0x33] => CipherSuite::TLS_DHE_RSA_WITH_AES_128_CBC_SHA,
            [0x00, 0x3d] => CipherSuite::TLS_RSA_WITH_AES_256_CBC_SHA256,
            [0x00, 0x3c] => CipherSuite::TLS_RSA_WITH_AES_128_CBC_SHA256,
            [0xcc, 0xa8] => CipherSuite::TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,
            [0xcc, 0xa9] => CipherSuite::TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,
            [0xc0, 0x2f] => CipherSuite::TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
            [0xc0, 0x30] => CipherSuite::TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
            [0xc0, 0x2b] => CipherSuite::TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
            [0xc0, 0x2c] => CipherSuite::TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
            [0xc0, 0x13] => CipherSuite::TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
            [0xc0, 0x09] => CipherSuite::TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
            [0xc0, 0x14] => CipherSuite::TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,
            [0xc0, 0x0a] => CipherSuite::TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
            [0x00, 0x9c] => CipherSuite::TLS_RSA_WITH_AES_128_GCM_SHA256,
            [0x00, 0x9d] => CipherSuite::TLS_RSA_WITH_AES_256_GCM_SHA384,
            [0x00, 0x2f] => CipherSuite::TLS_RSA_WITH_AES_128_CBC_SHA,
            [0x00, 0x35] => CipherSuite::TLS_RSA_WITH_AES_256_CBC_SHA,
            [0x00, 0x12] => CipherSuite::TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,
            [0x00, 0x0a] => CipherSuite::TLS_RSA_WITH_3DES_EDE_CBC_SHA,
            [0x00, 0xff] => CipherSuite::TLS_EMPTY_RENEGOTIATION_INFO_SCSV,
            [0x8a, 0x8a] | [0x9a, 0x9a] => CipherSuite::Reserved,
            _ => CipherSuite::Unknown((cipher_suite_byte_pair[0], cipher_suite_byte_pair[1])),
        }
    }
}
